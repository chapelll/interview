1.JS的垃圾回收机制
答:

什么是垃圾:
(1)全局变量都不是垃圾(任何时候都有可能用到)
(2)局部变量在使用之后就成为了垃圾(再也用不到了)
(3)没有被指向的对象是垃圾(几个对象互相引用，形成
一个环，那他们也算垃圾)

回收垃圾算法:
(1)标记清除算法(Mark-swipe): 从全局(global)开始，
对每个被全局引用的变量(对象)都进行标记，并且对每个标记
变量都再次进行查找，将这个变量引用的变量再打上标记.....
找完可以标记的全部变量之后，删除掉没有打上标记的变量。
缺点:太过耗费时间及算力。
改进: 1.一次收集一点垃圾，不要一次性全部收集完
      2.在空闲的时候进行垃圾收集
      3.新生代的函数频繁去查看是否还被别的引用
      
(2)引用计数算法
对所有变量都建一个表，一个变量被引用一次，就让该变量
被引用的值加1；如果没有被引用了，就让值减1。
垃圾收集器下一次运行时，自动删除值为0的变量
缺点: 可能会造成内存泄漏

JS无法自动释放与DOM树相关的引用




2.事件循环(Eventloop) 宏任务与微任务
答:
js是一门单线程语言，它在执行时会从最开始依次往下一行行
执行。当遇到异步任务的时候会将它们挂起，继续向下执行。
当异步任务条件满足时(如时间到了或者点击事件触发了)，会
将异步任务的回调函数放到任务队列中。当主线程的所有任务
执行完毕之后，会去看任务队列中有没有任务，有就按先后顺序
执行。这就是任务队列。

宏任务与微任务
异步任务分为两种: 宏任务 和 微任务
一种是宏任务: script setTimeout setInterval
一种是微任务: promise.then async await
每执行完一次宏任务就会执行所有的微任务，当微任务执行完
之后就会去执行排在下一位的宏任务。这就是事件循环
(第一个宏任务是script，也就是主线程)


