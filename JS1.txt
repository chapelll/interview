1.ES6语法知道哪些?分别怎么用?
答: 见ES6.txt

2.Promise、Promise.all、Promise.race 分别怎么用？
答：见总结的博客
写promise的用法:
    function fn() {
            return new Promise((resolve, reject) => {
                // 进行状态
                if (/*某种条件*/1) {
                    resolve(数据) 
                    //执行resolve函数(成功状态)
                } else {
                    reject(报错)
                    //执行reject函数(失败状态) 
                }
            })
        }

        fn().then((数据)=> {
            // 这里写具体的成功函数(对应resolve)
        },(报错)=> {
            // 这里写具体的失败函数(对应reject)
        })

Promise.all([promise1, promise2]).then(success, fail)
// 需要数组中的promise1和promise2全都成功才能调用success
// 其中有一个失败就调用fail

Promise.race([promise1, promise2]).then(success, fail)
// race是竞速的意思
// 数组中的promise1和promise2谁先变成完成状态(成功或者失败)就执行什么
// 谁第一个成功，就视为race的成功并调用success；谁第一个失败，就视为race的失败并调用fail    
   
3.手写函数防抖和函数节流   
   
函数防抖: 如果一直触发某事件我就一直不执行，只有
触发后一定等待时间内不再触发我才执行
        let timeout
        function debounce(func, delay) {
            return function () {
                window.clearTimeout(timeout)
                timeout = setTimeout(() => {
                    func.apply(this, arguments)
                }, delay)
            }
        }
        
函数节流: 技能是有CD的，每次技能放完就把技能
置为CD状态，要重新放时查看技能是否CD, 没在CD就放，
在CD就什么都不做 (一定时间内事件只能触发一次)
        let cd = true
        function throttle(func, delay) {
            return function() {
                if (!cd) {
                    return
                } else {
                    func.apply(this, arguments)
                    cd = false
                    setTimeout(()=>{
                        cd = true
                    },delay)
                }
            }
        }

4.手写AJAX

        let request = new XMLHttpRequest()
        request.open('GET', '/a/b/c?name=ff', true);  // 请求方式、URL、是否异步
        request.onreadystatechange = function () {    // 当后端状态发生改变
            if (request.readyState === 4 && request.status === 200) {
                // 4表示发送给后端的请求已完成    200表示请求成功
                console.log(request.responseText);
            }
        };
        request.send();

axios({
            url: '/getUsers',
            method: 'get',
            responseType: 'json', // 默认的
            data: {
                //'a': 1,
                //'b': 2,
            }
        }).then(function (response) {
            console.log(response);
            console.log(response.data);
        }).catch(function (error) {
            console.log(error);
            }）
   
5.这段代码里的 this 是什么？ (背代码)

(1) fn()
    this =》window(因为是全局调用的它)
    
(2) obj.fn()
    this =》obj(谁调用它this就指向谁)
    
(3) fn.call(xx,参数1，参数2)
    this =》xx(call方法强制指定this)
   
(4) fn.apply(xx,[])
    this =》xx(apply方法与call方法相似，只不过第二个参数是数组)
   
(5) fn.bind(xx,参数1，参数2)
    this =》xx(bind方法不会立即调用，而是返回一个新函数)
   
(6) new Fn()
    this => 新对象(使用new创建对象时，this指向新创建的那个对象)
   
(7) fn = ()=> {}
    this => 箭头函数外面的this(箭头函数没有自己的this，它的this指向外部的this)
   
6. 闭包和立即执行函数是什么？

(1) 闭包: 作用域引出的概念,即函数内部的函数可以访问
到外层函数里的变量
        function fn1() {
            var a = 1
            function fn2() {
                a = a + 1
                return a
            }
            return fn2
        } 

        var func = fn1()
        func()
        
//作用1: 可以将变量保存在内存中，即使没有使用
//作用2: 隐藏变量，我们无法直接访问函数内部的变量a
，必须通过一个函数间接访问到
闭包的使用场景: 防抖函数中用来存储定时器的那个变量，
在定时器中传参(外部函数包裹里面的函数，把外部函数赋
给另外一个函数，同时传参。定时器就使用这个另外函数)

(2) 立即执行函数: 声明一个匿名函数然后马上调用它

(function() {
  alert('我是立即执行函数!')
}) ()

// 在匿名函数外套一个括号(不套会报错)，后面的空
// 括号是让它立即执行

// 作用: 创建一片独立的作用域 (不受污染的局部作用域)
   
7.什么是 JSONP，什么是 CORS，什么是跨域？

源是什么？
源等于 协议 + 域名 + 端口号
        https  baidu.com  8080(默认就不写了)
   
如果两个url的协议、域名、端口号都一致，那么这两个
url就是同源的。(注意: baidu.com 和 www.baidu.com不同源!)
   
同源策略: 运行在源A的JS是不能获取源B的数据的(不允许跨域)  
   
JSONP：核心: 源A的JS可以引用到源B的图片、CSS、JS
源B可以将数据写在它的JS中，让别人引用它
源A先定义好一个函数，但不调用它。源B将数据放在名字
相同的函数并传参，传入的参数就是源B想共享的数据。
JS一旦被引用这个函数就会执行，源A就通过该函数获取到了
数据(也可以称为使用一个回调函数来获取数据)
优点: IE也可以使用JSONP进行跨域(IE不支持CORS)
缺点: 要使用一个script标签来使用(不支持POST，script标签的本质就是下载)

CORS: 核心: 一个网站的数据可以声明被另外一个网站获取
Access-Control-Allow-Origin: http://wwwzczcz
源A可以在请求头上这样写
(访问控制允许源: 可以允许wwwzczcz源访问该网站数据)





   
   
   